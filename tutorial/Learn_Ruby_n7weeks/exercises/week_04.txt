Try and write your code with whatever Ruby we have learned so far.

Exercise1. Write a class called Dog, that has name as an instance variable and the following methods:

bark(), eat(), chase_cat()
I shall create the Dog object as follows:
d = Dog.new('Leo')

Exercise1A (optional). Here's an additional challenge for all of you who already finished Exercise1:
 Write a method teach_trick which allows you to teach tricks to specific instances of the dog class like this:

d = Dog.new('Lassie')
d.teach_trick(:dance) { "#{@name} is dancing!" }
puts d.dance
d.teach_trick(:poo) { "#{@name} is a smelly doggy!" }
puts d.poo
puts
d2=Dog.new('Fido')
puts d2.dance
d2.teach_trick(:laugh) { "#{@name} finds this hilarious!" }
puts d2.laugh
puts d.laugh
puts
d3=Dog.new('Stimpy')
puts d3.dance
puts d3.laugh
# >> Lassie is dancing!
# >> Lassie is a smelly doggy!
# >>
# >> Fido doesn't know how to dance!
# >> Fido finds this hilarious!
# >> Lassie doesn't know how to laugh!
# >>
# >> Stimpy doesn't know how to dance!
# >> Stimpy doesn't know how to laugh!
You will also have to deal with the fact that people may get confused and will tell a certain dog 
to perform a trick it hasn't learned yet...

Exercise2. Write a Rectangle class. I shall use your class as follows:

r = Rectangle.new(23.45, 34.67)
puts "Area is = #{r.area}"
puts "Perimeter is = #{r.perimeter}"

Exercise3. Call this program (p026zdeafgm2.rb) - Modify your Deaf Grandma program (Week 3 / Exercise6):
What if grandma doesn't want you to leave? When you shout BYE, she could pretend not to hear you.
Change your previous program so that you have to shout BYE three times in a row.
Make sure to test your program: if you shout BYE three times, but not in a row, you should still be talking to grandma.
You must shout BYE three separate times. If you shout BYEBYEBYE or BYE BYE BYE, grandma should pretend not to hear you 
(and not count it as a BYE).
This program does not solve this exercise. 
But now that we have read a little bit about Procs and lambda, I thought I would show this program...

def intro
  <<-EOS
  Granny is having a hard time hearing lately, as her Dura-Gizers are dead for her hearing aids
  So you will want to yell (ALL CAPS) to have her hear you.
  EOS
end
granny = ->(what_was_said, years_remembered = [*(1930..1950)]) do
  what_was_said.upcase == what_was_said ?
    "No, Sonny.  At least not since #{years_remembered.sample}." :
    "HUH?  SPEAK UP SONNY!"
end
puts intro
until 'BYE' == sonny_says = gets.chomp
  puts granny[sonny_says] unless sonny_says.empty?
  puts "Say something to Granny:"
end
From Chris Pine's Book.

Exercise4. Write a Ruby program (call it p028swapcontents.rb) to do the following.
 Take two text files say A and B. The program should swap the contents of A and B.
 That is after the program is executed, A should contain B's contents and B should contains A's contents.

Exercise5. Difficulty level: MEDIUM Write a one-line Ruby script that displays on the screen all the files in the current folder 
as well as everything in all its sub folders, in sorted order.

Make use of Dir.glob method as follows:
Dir.glob('**/*')
Name this program inventory.rb.

 Create an inventory file by typing the following at the command prompt:
ruby inventory.rb > old-inventory.txt

After a few days, when some files would have been added / deleted from this folder, run the program again like:
ruby inventory.rb > new-inventory.txt

Now, write another Ruby script that displays on the screen all the files that have been added in this folder since the time
 the old-inventory.txt was created.
Discuss these exercises in the Week 4 forum. 
