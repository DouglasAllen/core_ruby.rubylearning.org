Week 6: Tutorial

Before you begin: 
First complete: Weeks 1 to 5


Week 6:

a. You need to read through the following pages. 
While doing so, please make a note of all your doubts, queries, questions, clarifications and after you have 
completed all the pages, post these on the forum here. 
There may be some questions that relate to something that has not been mentioned or discussed by me here; 
you could post the same too.

Access Control
Exceptions
Ruby Logging
Time class

b. Some of the important points to remember after you have read through the above pages are:

Ruby gives you three levels of protection:
public - methods can be called by everyone. A class's instance methods are public by default.
protected - methods can be invoked only by objects of the defining class and its subclasses.
private - methods cannot be called with an that private methods can be called only in the context 
of the current object.explicit receiver - the receiver is always self. 
This means The initialize method is always private.

Access control is determined dynamically, as the program runs, not statically. 
You will get an access violation only when the code attempts to execute the restricted method.
Top-level methods are private instance methods of the Kernel module.

attr_reader is reader only; attr_writer is writer only and attr_accessor is both reader and writer.

An exception is a special kind of object, an instance of the class Exception or a descendant of that class.
The raise method is from the Kernel module. 
By default, raise creates an exception of the RuntimeError class. 
To raise an exception of a specific class, you can pass in the class name as an argument to raise.
To do exception handling, we enclose the code that could raise an exception in a begin-end block and use 
one or more rescue clauses to tell Ruby the types of exceptions we want to handle.

It is to be noted that the body of a method definition is an implicit begin-end block; 
the begin is omitted, and the entire body of the method is subject to exception handling, 
ending with the end of the method.
If you write a rescue clause with no parameter list, the parameter defaults to StandardError.

If you need the guarantee that some processing is done at the end of a block of code, 
regardless of whether an exception was raised then the ensure clause can be used. 
ensure goes after the last rescue clause and contains a chunk of code that will always be executed 
as the block terminates. The ensure block will always run.

By default, the inspect message, which can be sent to any object, formats the object's ID and instance variables. 
It returns a string containing a human-readable representation of object. 
If not overridden, uses the to_s method to generate the string.
The Time class contains Ruby's interface to the set of time libraries written in C.
Time zero for Ruby is the first second GMT of January 1, 1970.
Ruby's DateTime class is superior to Time for astronomical and historical applications, 
but you can use Time for most everyday programs.

c. Exercises:

Please complete the Week 6 exercises and discuss in the Week 6 forum.

d. Quiz:
Please take the quiz after you have completed Week 6. 
All the questions are either of multiple-choice and/or true/false and based on what you have learned in Week 6. 
You have only 2 attempts to complete the quiz. Grades will be allotted for the quiz. 
