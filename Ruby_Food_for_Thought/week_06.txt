Hal Fulton's thoughts on Ruby:

a. Don't write 200 lines of code when 10 will do.
   A short program fragment will take up less space in the programmer's brain; 
   it will be easier to grasp as a single entity. 
   As a happy side effect, fewer bugs will be injected while the code is being written. 
   Embrace brevity, but do not sacrifice readability.

b. When I took German, I learned that all nouns were capitalized, but the word deutsch was not. 
   I complained to my professor; after all, this was the name of the language, wasn't it? 
   He smiled and said, "Don't fight it." What he taught me was to let German be German. 
   By extension, that is good advice for anyone coming to Ruby from some other language. 
   Let Ruby be Ruby.Don't expect it to be Perl, because it isn't; don't expect it to be LISP or Smalltalk, either. 
   On the other hand, Ruby has some common elements with all three of these. 
   Start by following your expectations, but when they are violated, don't fight it. 
   (Unless Matz agrees it's a needed change.)

c. Ruby strives to be friendly to the programmer. 
   For example, there are aliases or synonyms for many method names; 
   size and length will both return the number of entries in an array. 
   The variant spellings indexes and indices both refer to the same method. 
   Some consider this sort of thing to be an annoyance or anti-feature, but I consider it a good design.

d. Ruby strives for consistency and regularity. 
   For instance, Ruby has the habit of appending a question mark (?) to the name of a predicate like method.
   This is well and good; it clarifies the code and makes the namespace a little more manageable. 
   But what is more controversial is the similar use of the exclamation point in marking methods that are "destructive"
   or "dangerous" in the sense that they modify their receivers. 
   The controversy arises because not all of the destructive methods are marked in this way. 
   Shouldn't we be consistent? 
   No, in fact we should not. 
   Some of the methods by their very nature change their receiver (such as the Array methods replace and concat). 
   Some of them are "writer" methods allowing assignment to a class attribute; 
   we should not append an exclamation point to the attribute name or the equal sign. 
   Some methods arguably change the state of the receiver, such as read; 
   this occurs too frequently to be marked in this way. 
   If every destructive method name ended in a !, 
   our programs soon would look like sales brochures for a multilevel marketing firm.
   What we see in Ruby is not a "foolish consistency" nor a rigid adherence to a set of simple rules. 
   In language design, as Matz once said, you should "follow your heart."

e. Do not be a slave to performance issues.
   When performance is unacceptable, the issue must be addressed, 
   but it should normally not be the first thing you think about. 
   Prefer elegance over efficiency where efficiency is less than critical. 
