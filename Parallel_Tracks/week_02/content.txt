*PARALLEL TRACK* Start using Git and GitHub
To become a Ruby professional, here are some tools that I suggest you start using as early as possible. 
Please rest assured that spending time learning these tools is normal and in the end the reward is worth the effort..

1. Use Git
Here's what a Ruby master says about Git - 
"A new Ruby programmer should focus on source control - 
even if you work alone, even for a small "labs" type of applications, use SVN, Git or whatever you feel comfortable with.

What’s Version Control?

Version control also known as source control or source code management or revision control in its simplest form is 
saving your first draft, and then saving it as draft 2 and continuing on with your editing. 
This allows you some means of going back to a previous version if you decide that the direction you took in your 
document is not the direction you want to go, and you want to continue on from where your first draft first was. 
Version control in a more granular manner is being able to see each change as it was made. 
In reality, it ends up being likely that you want something between these two extremes.

Read this for more details.

What's Git?

Git is an open source version control system designed to handle very large projects with speed and efficiency, 
but just as well suited for small personal repositories 
(collection of resources that can be accessed to retrieve information); 
it is especially popular in the open source community, 
serving as a development platform for projects like the Linux Kernel, Ruby on Rails, etc.

Downloading and Installing Git

To download and install Git, the precompiled packages are available here: http://git.or.cz/

Select the relevant package for your operating system.

Note: Git still has some issues on the Windows platform but for normal usage the msysgit package shouldn’t let you down.

Download and install it from the url: 
http://code.google.com/p/msysgit/downloads/list and select the current version available.

Install by running the EXE installer. Accept the default install directory. 
It is recommended for Windows users to use the "Use Git Bash only" option.

Create a local folder

Create a new empty directory in any convenient location on your hard disk 
(I created and use the folder my_ruby_programs on c: of my hard disk).

Let us start using Git

Since I work on a Windows box, I shall talk about how to use Git there. 
However, all the following commands are also available on all other platforms.

In Windows Explorer, right mouse click on your local folder my_ruby_programs and choose "Git Bash Here". 
This opens up a command window (bash shell).

Introduce yourself to Git

For all operating users, you now need to identify yourself to Git (you need to do this only once).
With the bash shell still open type in the following:

$ git config --global user.name "Your name here"
$ git config --global user.email "Your email id here"
Substitute in your own user name and email (note that Git does not allow accented characters in user name).
This will set the info stored when you commit to a Git repository. Git has now been set up.

Create your SSH Key

The first step in using Git is to create your SSH Key. 
This will be used to secure communications between your machine and other machines, 
and to identify your source code changes. 
(If you already have an SSH key for other reasons, you can use it here, there is nothing Git-specific about this.)

To create our ssh key, type the command:

$ ssh-keygen -C "username@email.com" -t rsa
(with your own email address, of course).

Accept the default key file location. When prompted for a passphrase, make one up and enter it. 
If you feel confident that your own machine is secure, you can use a blank passphrase, 
for more convenience and less security. Note where it told you it stored the file. 
On the machine I tested with, it was stored in "c:\Documents and Settings\A\.ssh\".
Memorize your passphrase carefully. If you forget it, you will NOT be able to recover it.

Open the public file id_rsa.pub with a text editor. The text in there is your "public SSH key".

Use GitHub
What’s GitHub?

GitHub is a social code site optimized for hosting and sharing Git repositories. 
Putting a copy of your Git repository at GitHub serves two purposes:

it’s a full backup of your code (including the full history of commits)
it makes any future collaboration much easier. 
This step is optional, but being a GitHub member will open the door to participating in a wide variety 
of open-source projects.

Set up your GitHub account

Go to https://github.com/signup/free and sign up for a free account. 
Remember, this account can have unlimited public repositories and public collaborators 
(the total number of users who may read, write and fork your public repositories). 
Also, make sure that Javascript is enabled in your browser.

After you have created a GitHub account, login and please click on "Edit Your Profile" 
and fill in the relevant details in your GitHub account.

Creating a new repository

If you are already logged into your GitHub account you just created above, 
click on the "dashboard" link at the top right-hand-side of your GitHub page, you will see a "New Repository" button. 
Click on – "New Repository" to create a new public repository (fill in the details like Project name, description etc.)
Use the name myrubyprograms for your Project name.

Important: GitHub will show you a page with some instructions like Global setup, 
Next steps etc. - please keep this page open and get back to your Bash shell for the folder my_ruby_programs. 
Currently your folder my_ruby_programs is empty.

Next we shall put our local folder my_ruby_programs under Git management. In the open Bash shell type:

$ git init
$ touch README
$ git add README
$ git commit -m 'first commit'
The git init command creates an empty Git repository or reinitializes an existing one. 
It has created a repository in the current folder i.e. my_ruby_programs. 
Git has created a .git subdirectory in your folder my_ruby_programs that will hold your changes locally 
(in compressed form). The new local repo will not contain anything yet.

The touch README command creates the file README, if the file does not already exist. 
If the file already exists, the accessed / modification time is updated for that file.

In Git, you "stage" things before you commit them. 
You do this with the git add command (for example: git add README). 
This adds specific content to the ‘stage’. To stage all changes and new files, we type git add .

The git add . command will take the working directory and all subdirectories and every single file,
i.e. it adds all content to the ‘stage’ (this snapshot is now stored in a temporary staging area which Git calls the 
"index"). If you make any changes to a file after staging (but before committing),
you’ll need to git add the file again.

When you get your changes just the way you want them added to the current revision, 
then you need to commit that revision to your local repository 
(this permanently stores the contents of the index in the repository).

We already have something staged and ready and it is time to commit it. 
We do it as follows git commit -m 'first commit'.

Add your SSH key to GitHub

Access your account on GitHub and Click "Account Settings" > Click "SSH Public Keys" > Click "Add another public key"

Open the id_rsa.pub file (which we had talked about earlier) with a text editor 
(Notepad, TextEdit, or gedit will do just fine). This is your public SSH key. 
You may need to turn on "view hidden files" to find it because the .ssh directory is hidden. 
It’s important you copy your SSH key exactly as it is written without adding any newlines or whitespace.
Now paste it into the "Key" field. Hit "Add Key".

In your open Bash shell, type:

$ git remote add origin git@github.com:SatishTalim/myrubyprograms.git
Replace SatishTalim (use your username) with what's shown on the already open GitHub page. 
The above command needs to be executed only once in case you are not going to change the remote repository.

Now type:

$ git push -u origin master
Once your changes are committed to your local repository, 
you need to push them to the remote repository for others to get at. 
To do that, you need to execute git push, 
which will push all the changes from your local repository up to the remote repository. 
We want to push changes back to the original repository, which is aliased as origin, to the master branch.

Here's my sample GitHub repository - https://github.com/SatishTalim/myrubyprograms.

Note: From this point onwards, whenever you create a new program, 
or modify an existing program in the folder my_ruby_programs, open a Bash shell in that folder and type:

$ git add .
$ git commit -m "commit"
$ git push origin master
The GitHub repository will show you the latest files that you have uploaded.

Using Git & GitHub eBook (Updated 15th Sept. 2011)

Using Git & GitHub eBook is an easy-to-follow guide to learn the essential features of both Git and GitHub 
that you’ll end up using every day.

It is priced at a reasonable US$ 7. 
The money collected helps me maintain the site and provide quality content to you all.

Purchase of this eBook is not mandatory. 
